% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.seq.o.R
\name{ds.seq.o}
\alias{ds.seq.o}
\title{ds.seq.o calling seqDS.o}
\usage{
ds.seq.o(FROM.value.char = "1", BY.value.char = "1",
  LENGTH.OUT.value.char = NULL, ALONG.WITH.name = NULL,
  newobj = "newObj", datasources = NULL)
}
\arguments{
\item{FROM.value.char, }{a number given as a character denoting the starting value of the sequence. 
The default value is set to 1.}

\item{BY.value.char, }{a number given as a character indicating the increment of the sequence.
The default value is set to 1.}

\item{LENGTH.OUT.value.char, }{a non-negative number given as character denoting the desired 
length of the sequence. If the argument \code{ALONG.WITH.name} is set, then the
\code{LENGTH.OUT.value.char} argument must miss out.}

\item{ALONG.WITH.name, }{is the name of a serverside vector in inverted commas that is used to
determine the length of the created vector. The length of the assigned sequence will then be
equal to the length of the vector specified by the \code{ALONG.WITH.name} argument even if
a value for the \code{LENGTH.OUT.value.char} argument is set. If you want to specify the output
length with the \code{LENGTH.OUT.value.char} argument you must miss out the \code{ALONG.WITH.name}
argument altogether}

\item{newobj}{This a character string providing a name for the output
sequence vector which defaults to 'newObject' if no name is specified.}

\item{datasources}{specifies the particular opal object(s) to use. If the <datasources>
argument is not specified the default set of opals will be used. The default opals
are called default.opals and the default can be set using the function
{ds.setDefaultOpals.o}. If the <datasources> is to be specified, it should be set without
inverted commas: e.g. datasources=opals.em or datasources=default.opals. If you wish to
apply the function solely to e.g. the second opal server in a set of three,
the argument can be specified as: e.g. datasources=opals.em[2].
If you wish to specify the first and third opal servers in a set you specify:
e.g. datasources=opals.em[c(1,3)]}
}
\value{
the object specified by the newobj argument (or default name newObject) is written to the
serverside and a validity message indicating whether the newobject has been correctly
created at each source is returned to the client. The object is a sequence vector. If it has not
been correctly created the return object return.info details in which source the problem exists
and whether: (a) the object exists at all; (b) it has meaningful content indicated by a valid class.
}
\description{
Generates useful sequences to support data management and analysis
}
\details{
An assign function that uses the native R function seq() to create
any one of a flexible range of sequence vectors that can then be used to help
manage and analyse data. As it is an assign function the resultant vector is
written as a new object onto all of the specified data source servers. For
the purposes of creating the DataSHIELD equivalent to seq() in native R we
have used all of the original arguments (see below) except the <to> argument.
This simplifies the function and prevents some combinations of arguments that
lead to an error in native R. The effect of the <to> argument - see help(seq) in
native R - is to specify the terminal value of the sequence. However,
when using seq() one can usually specify other arguments (see below) to mimic
the desire effect of <to>. These include: <from>, the starting value of the
sequence; <by>, its increment (+ or -), and <length.out> the length of the final vector
in each data source.
}
\author{
Paul Burton, Demetris Avraam for DataSHIELD Development Team
}
